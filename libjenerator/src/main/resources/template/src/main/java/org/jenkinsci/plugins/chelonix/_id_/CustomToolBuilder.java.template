/*
 * AUTO-GENERATED by Jenkins-plugin-generator
 * ADD URL HERE
 */
package org.jenkinsci.plugins.chelonix.{{id}};

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.cloudbees.jenkins.plugins.sshcredentials.SSHUserPrivateKey;
import com.cloudbees.plugins.credentials.CredentialsMatchers;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.common.StandardListBoxModel;
import com.cloudbees.plugins.credentials.common.StandardUsernameCredentials;
import hudson.EnvVars;
import hudson.Extension;
import hudson.FilePath;
import hudson.Launcher;
import hudson.Util;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.BuildListener;
import hudson.model.Project;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;
import hudson.util.ArgumentListBuilder;
import hudson.util.ListBoxModel;
import jenkins.model.Jenkins;
import org.apache.commons.lang.StringUtils;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundConstructor;

/**
 * A builder which wraps an Ansible invocation.
 */
public class CustomToolBuilder extends Builder {

    public final String installationName;

    {{#parameters}}
      {{#generateFieldDeclaration}}{{id}}{{/generateFieldDeclaration}}
    {{/parameters}}

    @DataBoundConstructor
    public CustomToolBuilder(String installationName,{{#constructor}}{{/constructor}})
    {
        this.installationName = installationName;
        {{#parameters}}
          this.{{id}} = {{id}};
        {{/parameters}}
    }

    @Override
    public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {
        CustomToolInstallation installation = getInstallation();
        EnvVars envVars = build.getEnvironment(listener);
        String exe = installation.getExecutable("{{command.executable}}", launcher);
        if (exe == null) {
            listener.fatalError("{{name}} executable not found, check your installation.");
            return false;
        }
        ArgumentListBuilder args = new ArgumentListBuilder();
        args.add(exe);

        {{#parameters}}
            {{#generateArgs}}
                {{id}}
            {{/generateArgs}}
        {{/parameters}}

        try {
            if (launcher.launch().pwd(build.getWorkspace()).cmds(args).stdout(listener).join() != 0) {
                return false;
            }
        } catch (IOException ioe) {
            Util.displayIOException(ioe, listener);
            ioe.printStackTrace(listener.fatalError(hudson.tasks.Messages.CommandInterpreter_CommandFailed()));
            return false;
        }
        return true;
    }

    public CustomToolInstallation getInstallation() throws IOException {
        if (installationName == null) {
            if (CustomToolInstallation.allInstallations().length == 0) {
                throw new IOException("{{name}} installation not found");
            }
            return CustomToolInstallation.allInstallations()[0];
        } else {
            for (CustomToolInstallation installation: CustomToolInstallation.allInstallations()) {
                if (installationName.equals(installation.getName())) {
                    return installation;
                }
            }
        }
        throw new IOException("{{name}} installation not found");
    }

    @Extension
    public static final class DescriptorImpl extends BuildStepDescriptor<Builder>  {

        public DescriptorImpl() {
            load();
        }

        /*
        public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Project project) {
            return new StandardListBoxModel()
                    .withEmptySelection()
                    .withMatching(CredentialsMatchers.instanceOf(SSHUserPrivateKey.class),
                            CredentialsProvider.lookupCredentials(StandardUsernameCredentials.class, project));
        }
        */

        @Override
        public boolean isApplicable(Class<? extends AbstractProject> klass) {
            return true;
        }

        @Override
        public String getDisplayName() {
            return "Invoke {{name}}";
        }

        public CustomToolInstallation[] getInstallations() {
            return CustomToolInstallation.allInstallations();
        }
    }
}